#!/bin/bash

export JAVA_HOME=/home/propensive/.local/share/oubliette/dist/20-jdk
mkdir -p bin dist .cache log

root="$(realpath one)"
run="0"

if [[ "$1" = "-t" ]]
then
  run="$2"
  shift
  shift
fi

build="$1"
module="$(echo $build | cut -d/ -f1)"
submodule="$(echo $build | cut -d/ -f2)"
scalac="/home/propensive/pub/dotty/bin/scalac"
scala="/home/propensive/pub/dotty/bin/scala"

declare -A links
declare -A built
declare -A hashes
declare -A lib

OLDIFS="$IFS"
IFS=$'\n'

for line in $(cat links | grep -v '^#')
do
  m="$(echo "$line" | cut -d: -f1)"
  d=$(echo "$line" | cut -d$'\t' -f2)
  links[$m]="$d"
done
IFS="$OLDIFS"

setChecksum() {
  local dir="$1"
  if [ "${hashes[$dir]}" = "" ]
  then hashes["$1"]="$(find $dir -name '*.scala' | xargs md5sum | sort | md5sum | cut -d' ' -f1)"
  fi
}


mkclasspath() {
  local id="$1"
  local acc=""
  if [ "${lib[$id]}" = "" ]
  then
    local buildLinks=("$(echo "${links[$id]}" | tr ' ' '\n')")
    for lnk in $buildLinks
    do mkclasspath "$lnk"
    done

    for lnk in $buildLinks
    do acc="$acc dist/$(echo $lnk | sed 's./.-.').jar ${lib[$lnk]}"
    done
    local dedup="$(echo $acc | tr ' ' '\n' | sort | uniq | tr '\n' ' ')"
    lib[$id]="$dedup"
  fi
}

build() {
  local id="$1"
  local mod="$(echo $id | cut -d/ -f1)"
  local submod="$(echo $id | cut -d/ -f2)"
  if [ ! "${built[$id]}" = "1" ]
  then
    local buildLinks=("$(echo "${links[$id]}" | tr ' ' '\n')")
    for lnk in $buildLinks
    do build "$lnk"
    done
    local src="$root/$mod/src/$submod"
    
    local chksum="$(cat ".cache/$id" 2>/dev/null)"
    setChecksum "$src"
    if [ ! "$chksum" = "${hashes[$src]}" ]
    then
      echo -n "Compiling $id..."
      mkdir -p bin/$mod/$submod
      if [ -d "$root/$mod/res" ]
      then
        for res in $(ls $root/$mod/res)
        do cp -r $root/$mod/res/$res bin/$mod/$submod/
        done
      fi
      mkclasspath "$id"
      classpath="$(echo "${lib[$id]}" | sed 's/ /:/g')"
      rm -f "log/$mod/$submod.log"
      $scalac \
        -classpath "$classpath" \
        -d bin/$mod/$submod \
        -Xmax-inlines 64 \
        -feature \
        -J-Xss1536K \
        -J--enable-preview \
        -new-syntax \
        -Yrequire-targetName \
        -Ysafe-init \
        -Yexplicit-nulls \
        -Ycheck-all-patmat \
        -language:experimental.clauseInterleaving \
        -language:experimental.fewerBraces \
        -language:experimental.erasedDefinitions \
        -language:experimental.saferExceptions \
        -language:experimental.namedTypeArguments \
        $src/*.scala > "log/$mod-$submod.log" 2>&1 && \
	        mkdir -p ".cache/$mod" && \
	        echo ${hashes[$src]} > ".cache/$id" && \
	        built[$id]="1" && \
          jar cf "dist/$mod-$submod.jar" $(for inc in $(ls bin/$mod/$submod); do echo "-C bin/$mod/$submod $inc"; done) || exit 1
	    cat "log/$mod-$submod.log"
      echo "done"
    fi
  fi
}

build "$build"
if [ ! "$run" = "0" ]
then
  mkclasspath "$build"
  classpath="$(echo "${lib[$build]}" | sed 's/ /:/g')"

  $scala -classpath "${classpath}dist/$module-$submodule.jar" $run
fi
