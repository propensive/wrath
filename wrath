#!/bin/bash
#
#   Wrath, version 0.1.0. Copyright 2023 Jon Pretty, Propensive OÜ.
#
#   The primary distribution site is: https://propensive.com/
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
#   file except in compliance with the License. You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software distributed under the
#   License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
#   either express or implied. See the License for the specific language governing permissions
#   and limitations under the License.
#

declare -g -A refs built parsed pids hashes lib group sources mainClass
declare -g run fetch scala scalac compiler repl esc overrideMain execClass
declare -i columns

group[dotty]="lampepfl"
esc=$'\e'
compiler="$(realpath scala)"
columns=${COLUMNS:-116}

nonempty() {
  if [ "$2" = "" ]
  then
    echo "The option $1 requires a parameter."
    exit 1
  fi
}

showHelp() {
  cat << EOF
Usage: wrath [options]
Builds a project with Wrath.

Options:
  -c, --clean              clean the target project
  -C, --deep-clean         clean all targets
  -f, --fetch              automatically fetch missing dependencies
  -F, --fetch-all          automatically fetch missing dependencies and compiler
  -h, --help               show this help message
  -j, --jdk <path>         use the JDK with home directory at <path>
  -r, --repl               start the REPL
  -t, --target <target>    target to compile
  -x, --exec <class>       run the main class <class>

Examples:
  wrath -t rudiments/core
  wrath -C -t rudiments/core -F

© Copyright 2023 Jon Pretty & Propensive OÜ
EOF
  exit 0
}

fetch() {
  local repo
  repo="$1"
  
  git clone -q https://github.com/"${group[$repo]}"/"$repo" "$repo"
}

clean() {
  case "$clean" in
    1)
      message "$module" "$component" "Cleaning"
      rm -rf .wrath/bin/"$target" .wrath/cache/"$target" .wrath/log/"$target"
      ;;
    2)
      gmessage "Cleaning all modules"
      rm -rf .wrath/bin .wrath/cache .wrath/log .wrath/plugin
      ;;
  esac
}

checkCompiler() {
  if [ ! -d "scala" ]
  then
    if [ "$fetch" = "2" ]
    then
      gmessage "Fetching Scala compiler"
      fetch dotty && mv dotty scala
      gmessage "Building Scala compiler"
      scala/bin/scalac -version > .wrath/log/scala.log
      gmessage "Finished building Scala compiler"
    else
      gmessage "Scala compiler not found."
      gmessage "Try again with -F or create a symlink to a clone of the lampepfl/dotty repository."
      exit 1
    fi
  fi
  scala="$compiler"/bin/scala
  scalac="$compiler"/bin/scalac
}

mkdirs() {
  mkdir -p .wrath/bin dist .wrath/cache .wrath/log .wrath/plugins
}

setChecksum() {
  local dir
  dir="$1"
  if [ "${hashes[$dir]}" = "" ]
  then hashes[$dir]="$(md5sum "$dir"/*.scala | md5sum | cut -d' ' -f1)"
  fi
}

package() {
  local dir file
  local -a args
  local -i len
  jarFile="$1"
  dir="$2"
  len="${#dir}"
  len=$((len + 1))
  for include in "$dir"/*
  do
    file="${include:$len}"
    args+=(-C "$dir" "$file")
  done
  jar cf "${jarFile}" "${args[@]}"
}

readToml() {
  local file dir section IFS isMain buildModule buildComponent
  local -i lineNo
  
  IFS=$'\n'
  buildModule="$1"
  buildComponent="$2"
  file="$3"
  isMain="$4"
  lineNo=0
  
  if [ ! "${parsed[$file]}" = "1" ]
  then
    if [ ! "$isMain" = "1" ]
    then message "$buildModule" "$buildComponent" "Reading build"
    fi
    
    while read -r line
    do
      lineNo=$((lineNo+1))
      case "$line" in
        '['*'/'*']')
          section="${line:1:-1}"
          ;;
        '['*']')
	  if [ "$isMain" = "1" ]
	  then main="${line:1:-1}"
	  fi
	  ;;
        '')
          ;;
        'target = '*)
          if [ "$main" = "" ]
          then fail "$buildModule" "$buildComponent" "Invalid configuration at line $lineNo: 'target' should be inside a main section"
          elif [ "$target" = "" ]
	  then target="${line:9}"
          fi
	  ;;
        'repos = '*)
          if [ "$main" = "" ]
          then fail "$buildModule" "$buildComponent" "Invalid configuration at line $lineNo: 'repos' should be inside a main section"
          else setRepoGroups "${line:8}"
          fi
          ;;
        'main = '*)
          if [ "$section" = "" ]
          then fail "$buildModule" "$buildComponent" "Invalid configuration at line $lineNo: 'main' should be inside a module section"
          else mainClass[$section]="${line:7}"
          fi
          ;;
        'src = '*)
          if [ "$section" = "" ]
          then fail "$buildModule" "$buildComponent" "Invalid configuration at line $lineNo: 'src' should be inside a module section"
          else sources[$section]="${line:6}"
          fi
          ;;
        'refs = '*)
          if [ "$section" = "" ]
          then fail "$buildModule" "$buildComponent" "Invalid configuration at line $lineNo: 'refs' should be inside a module section"
          else refs[$section]="${line:7}"
          fi
          ;;
        *)
          fail "$buildModule" "$buildComponent" "Invalid configuration at line $lineNo."
          ;;
      esac
    done < "$file"
    parsed[$file]="1"
  fi
}

setRepoGroups() {
  local IFS
  local -a repos
  IFS=' '
  read -ra repos <<< "$1"
  
  for repo in "${repos[@]}"
  do group[${repo##*/}]="${repo%%/*}"
  done
}

classpath() {
  local IFS id
  local -a acc dependencies dedup
  id="$1"
  IFS=' '
  
  if [ "${lib[$id]}" = "" ]
  then
    read -ra dependencies <<< "${refs[$id]}"
    for ref in "${dependencies[@]}"
    do classpath "$ref"
    done

    for ref in "${dependencies[@]}"
    do
      acc+=(dist/"${ref//\//-}".jar)
      acc+=("${lib[$ref]}")
    done
    dedup="$(echo "${acc[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')"
    lib[$id]="$dedup"
  fi
}

build() {
  local IFS id buildModule buildComponent root srcDir chksum
  
  id="$1"
  buildModule="${id%%/*}"
  buildComponent="${id##*/}"
  
  if [ "$buildModule" = "$main" ]
  then root="$(realpath .)"
  else root="$(realpath "$buildModule")"
  fi
  
  IFS=' '
  
  if [ ! -d "$root" ]
  then
    if [ ! "$fetch" = "" ]
    then
      message "$buildModule" "$buildComponent" "Cloning Git repository"
      fetch "$buildModule"
    else
      message "$buildModule" "$buildComponent" "Module not found"
      fail "$buildModule" "$buildComponent" "Try again with -f or create a symlink to $root."
    fi
  fi

  if [ ! -e "$root"/build.wrath ]
  then fail "$buildModule" "$buildComponent" "Build file $root/build.wrath does not exist"
  else readToml "$buildModule" "$buildComponent" "$root"/build.wrath
  fi
  
  if [ ! "${built[$id]}" = "1" ]
  then
    if [ "${pids[$id]}" = "" ]
    then
      read -ra dependencies <<< "${refs[$id]}"
      for ref in "${dependencies[@]}"
      do build "$ref"
      done
      
      for ref in "${dependencies[@]}"
      do
        if [ ! "${pids[$ref]}" = "" ]
        then wait "${pids[$ref]}"
        fi
      done
      srcDir="$root/${sources[$buildModule/$buildComponent]}"
      chksum="$(cat .wrath/cache/"$id" 2>/dev/null)"
      setChecksum "${srcDir}"
      if [ ! "$chksum" = "${hashes[$srcDir]}" ]
      then
        message "$buildModule" "$buildComponent" "Compiling with Scala"
        mkdir -p .wrath/bin/"$buildModule"/"$buildComponent"
        if [ -d "$root/res" ]
        then
          for res in "$root"/res/*
          do cp -r "$res" .wrath/bin/"$buildModule"/"$buildComponent"/
          done
        fi
        classpath "$id"
        classpath="${lib[$id]// /:}"
        rm -f .wrath/log/"$buildModule"/"$buildComponent".log
        compile "$buildModule" "$buildComponent" "$classpath" "$root"
        pids[$id]="$!"
        
	if [ -f "$root"/res/plugin.properties ]
        then
	  emssage "$buildModule" "$buildComponent" "Installing plugin"
	  cp dist/"$buildModule"-"$buildComponent".jar .wrath/plugins/"$buildModule"-"$buildComponent".jar
        fi
      fi
    fi
  fi
}

compile() {
  local classpath buildModule buildComponent root srcDir
  local -i pageWidth
  local -a opts
  buildModule="$1"
  buildComponent="$2"
  classpath="$3"
  pageWidth=$((columns - 21))
  root="$4"
  srcDir="${sources[$buildModule/$buildComponent]}"

  opts=(
    -classpath "$classpath"
    -d .wrath/bin/"$buildModule"/"$buildComponent"
    -Xmax-inlines 64
    -Xpluginsdir .wrath/plugins
    -feature
    -pagewidth "$pageWidth"
    -J-Xss1536K
    -J--enable-preview
    -new-syntax
    -source future
    -Wunused:imports
    -Yrequire-targetName
    -Ysafe-init
    -Yexplicit-nulls
    -Ycheck-all-patmat
    -language:experimental.clauseInterleaving
    -language:experimental.fewerBraces
    -language:experimental.erasedDefinitions
    -language:experimental.saferExceptions
    -language:experimental.namedTypeArguments
  )

  rm -f .wrath/log/"$buildModule"-"$buildComponent".log
  touch .wrath/log/"$buildModule"-"$buildComponent".log
  if $scalac "${opts[@]}" "$root"/"$srcDir"/*.scala > .wrath/log/"$buildModule"-"$buildComponent".log 2>&1
  then
    mkdir -p .wrath/cache/"$buildModule"
    echo "${hashes[$root/$srcDir]}" > .wrath/cache/"$id"
    built[$id]="1"
    message "$buildModule" "$buildComponent" "Finished compiling"
    
    while read -r line
    do message "$buildModule" "$buildComponent" "$line"
    done < .wrath/log/"$buildModule"-"$buildComponent".log

    package dist/"$buildModule"-"$buildComponent".jar .wrath/bin/"$buildModule"/"$buildComponent"
  else
    message "$buildModule" "$buildComponent" "Compilation failed"
    
    while read -r line
    do message "$buildModule" "$buildComponent" "$line"
    done < .wrath/log/"$buildModule"-"$buildComponent".log
    
    exit 1
  fi
}

fail() {
  message "$1" "$2" "$3"
  exit 1
}

gmessage() {
  local text prefix
  text="$1"
  prefix="${esc}[1;32mwrath${esc}[2;37m:${esc}[0m"
  printf "%38s %s\n" "$prefix" "$text"
}

message() {
  local module component text prefix
  module="$1"
  component="$2"
  text="$3"
  prefix="${esc}[0;36m$module${esc}[2;37m/${esc}[1;34m$component${esc}[2;37m:${esc}[0m"
  printf "%52s %s\n" "$prefix" "$text"
}

parseOpts() {
  while [[ $# -gt 0 ]]
  do
    case "$1" in
      -c|--clean)
        clean="1"
        shift 1 ;;
      -C|--deep-clean)
        clean="2"
        shift 1 ;;
      -f|--fetch)
        fetch="1"
        shift 1 ;;
      -F|--fetch-alll)
        fetch="2"
        shift 1 ;;
      -h|--help)
        showHelp
        ;;
      -j|--jdk)
        nonempty "$@"
        export JAVA_HOME="$2"
        shift 2 ;;
      -m|--main)
        nonempty "$@"
	overrideMain="$2"
	shift 2 ;;
      -r|--repl)
        repl="1"
	shift ;;
      -s|--scala)
        nonempty "$@"
        compiler="$2"
        shift 2 ;;
      -t|--target)
        target="$2"
        shift 2 ;;
      -x|--exec)
        run="1"
        shift ;;
      -*)
        gmessage "Unrecognized option: '$1'"
        exit 1 ;;
      *)
        gmessage "Unrecognized parameter: '$1"
        exit 1 ;;
    esac
  done
}

checkTarget() {
  if [[ "$target" = "" ]]
  then
    gmessage "A build target is required"
    exit 1
  fi
}

parseOpts "$@"
gmessage "Starting build"
readToml "$module" "$component" "build.wrath" 1

module="${target%%/*}"
component="${target##*/}"

checkCompiler
clean
mkdirs
build "$target"

wait

if [ "$run" = "1" ]
then
  classpath "$target"
  classpath="${lib[$target]// /:}"
  execClass="${overrideMain:-${mainClass[$target]}}"
  if [ "$execClass" = "" ]
  then fail "$module" "$component" "Main class has not been specified."
  else "$scala" -classpath "${classpath}"dist/"$module"-"$component".jar "$execClass"
  fi
fi

if [ "$repl" = "1" ]
then
  classpath "$target"
  classpath="${lib[$target]// /:}"
  "$scala" -classpath "${classpath}"dist/"$module"-"$component".jar
fi
