#!/bin/bash
#
#   Wrath, version 0.3.0. Copyright 2023 Jon Pretty, Propensive OÜ.
#
#   The primary distribution site is: https://propensive.com/
#
#   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
#   file except in compliance with the License. You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software distributed under the
#   License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
#   either express or implied. See the License for the specific language governing permissions
#   and limitations under the License.
#

declare -g -A include parsed hashes lib sources mainClass artifactFile jars plugin repoSeen building download coverage buildIdFile
declare -g run showClasspath fetch scala scalac compiler repl esc overrideMain execClass defaultDir workDir installTarget
declare -g project module buildFile cacheDir configFile garbageCollect benchmark quiet profile oldGovernor artifact
declare -i columns
declare -a execOpts arguments

# start codl.sh
declare -A nodes childNodes nodeTypes identifier values
declare -a focus
focus=("")
shopt -s extglob

refocus() {
  local -i level difference depth
  local -a nodeArgs
  local node nodeType address parent
  level=$1
  nodeId="$2"
  file="$3"
  nodeType="$4"
  nodeArgs=("${@:4}")
  depth=${#focus[@]}
  difference=$((depth-level))

  while [ $difference -gt 2 ]
  do
    unset 'focus[-1]'
    depth=${#focus[@]}
    difference=$((depth-level))
  done

  if [ $difference = 2 ]
  then
    unset 'focus[-1]'
    difference=$((difference-1))
  fi
  if [ $difference = 1 ]
  then focus+=("$nodeId")
  fi

  printf -v address ".%s" "${focus[@]}"
  parent="${address%.*}"
  address="${address:2}"
  parent="${parent:2}"
  nodeTypes["$file:$address"]="${nodeType}"

  if [ "${values["$file:$address"]}" = "" ]
  then values["$file:$address"]="${nodeArgs[*]:1}"
  else values["$file:$address"]+=" ${nodeArgs[*]:1}"
  fi

  if [ "${childNodes["$file:$parent"]}" = "" ]
  then childNodes["$file:$parent"]="$file:$address"
  else childNodes["$file:$parent"]+=" $file:$address"
  fi
}

parseLine() {
  local -i level abort lineNo
  local -a atoms
  local line IFS id file
  file="$1"
  line="$2"
  level=0
  abort=0

  while [ $abort = 0 ]
  do
    case "$line" in
      *( )#*|*( ))
        abort=1
        lineNo=$((lineNo+1))
        ;;
      '  '*)
        level=$((level+1))
        line="${line:2}"
        lineNo=$((lineNo+1))
        ;;
      *)
        read -ra atoms <<< "$line"
        nonEmpty "${identifier[${atoms[0]}]}" "Unrecognized identifier: ${atoms[0]} in $file line $lineNo"
        id="${atoms[${identifier[${atoms[0]}]}]}"
        nonEmpty "$id" "Unrecognized atom: '${atoms[0]}'"
        refocus $level "$id" "$file" "${atoms[0]}" "${atoms[@]:1}"
        abort=1
        lineNo=$((lineNo+1))
        ;;
    esac
  done
}

parseCodl() {
  local file IFS
  file="$1"
  filename="$file"
  while IFS=$'\n' read -r line
  do parseLine "$filename" "$line"
  done < "$file"
}

childPaths() {
  local filter node IFS
  local -a nodes
  IFS=$' '
  node="$1"
  filter="$2"
  read -ra nodes <<< "${childNodes[$node]}"
  for node in "${nodes[@]}"
  do
    if [ "$filter" = "" ]
    then printf "%s\n" "$node"
    elif [ "$filter" = "${nodeTypes[$node]}" ]
    then printf "%s\n" "$node"
    fi
  done
}

children() {
  local filter node IFS
  local -a nodes
  local -i prefix
  IFS=$' '
  node="$1"
  prefix="${#node}"
  filter="$2"

  if [ "${node:0-1}" != ":" ]
  then prefix=$((prefix+1))
  fi

  read -ra nodes <<< "${childNodes[$node]}"
  for node in "${nodes[@]}"
  do
    if [ "$filter" = "" ]
    then printf "%s\n" "${node:$prefix}"
    elif [ "$filter" = "${nodeTypes[$node]}" ]
    then printf "%s\n" "${node:$prefix}"
    fi
  done
}

nonEmpty() {
  if [ "$1" = "" ]
  then
    printf "%s\n" "$2"
    exit 1
  fi
}

values() {
  local address
  local -a data
  address="$1"
  nonEmpty "$address" "Cannot access values for empty node"
  read -ra data <<< "${values[$address]}"
  for datum in "${data[@]}"
  do printf "%s\n" "$datum"
  done
}
# end codl.sh

esc=$'\e'
columns=${COLUMNS:-116}
configFile="${XDG_CONFIG_HOME:-$HOME/.config}/wrath.conf"
cacheDir="${XDG_CACHE_HOME:-$HOME/.cache}/wrath/dist"
distDir=.wrath/dist
buildFile="fury"
fetch=0

nonempty() {
  if [ "$2" = "" ]
  then
    echo "The option $1 requires a parameter."
    exit 1
  fi
}

showHelp() {
  cat << EOF
Usage: wrath [options]
Builds a project with Wrath.

Options:
  -a, --artifact           build a artifact
  -c, --clean              clean the target project
  -C, --deep-clean         clean all targets
  -d, --default <dir>      look inside directory <dir> for dependencies
  -f, --fetch              automatically fetch missing dependencies
  -F, --fetch-all          automatically fetch missing dependencies and compiler
  -g, --garbage-collect    remove orphaned cache files
  -h, --help               show this help message
  -i, --install <path>     install the artifact to <path>
  -j, --jdk <path>         use the JDK with home directory at <path>
  -o, --output             specify an output directory
  -p, --profile            profile the JVM
  -q, --quiet              no output, except from execution
  -r, --repl               start the REPL
  -S, --show-classpath     show the classpath
  -t, --target <target>    target to compile
  -x, --exec <class>       run the main class <class>

Examples:
  wrath -t rudiments/core
  wrath -C -t rudiments/core -F

© Copyright 2023 Jon Pretty & Propensive OÜ
EOF
  exit 0
}

fetchLibs() {
  local id IFS
  local -a libs
  IFS=" "
  id="$1"
  read -ra libs <<< "${jars[$id]}"

  for url in "${libs[@]}"
  do
    if [ ! -f ".wrath/lib/$url.jar" ]
    then
      message "$id" "Downloading $url"
      download "${download[$url]}" "${url}.jar"
    fi
  done
}

download() {
  local filename url
  url="$1"
  filename="$2"
  wget -q -O .wrath/lib/"$filename" "$url"
}

fetchRepo() {
  local repo dest
  repo="$1"
  dest="$2"
  if [ ! -d "$dest" ]
  then
    rmessage "$repo" "Cloning Git repository"
    git clone -q https://github.com/"$repo" "$dest"
  fi
}

clean() {
  local file

  if [ "$garbageCollect" = "1" ]
  then
    gmessage "Garbage collecting orphan files"
    find "$cacheDir" -links 1 -exec rm -- '{}' '+'
  fi

  case "$clean" in
    1)
      message "$project"/"$module" "Cleaning"
      rm -rf .wrath/bin/"$target" .wrath/cache/"$target" .wrath/log/"$target"
      ;;
    2)
      gmessage "Cleaning all modules"
      rm -rf .wrath/bin .wrath/cache .wrath/log .wrath/plugin
      ;;
  esac
}

checkCompiler() {
  if [ -d scala ]
  then compiler="$(realpath scala)"
  else
    if [ -d "$defaultDir"/scala ]
    then compiler="$(realpath "$defaultDir"/scala)"
    elif [ "$fetch" = 2 ]
    then
      compiler="$(realpath scala)"
      gmessage "Fetching Scala compiler"
      fetchRepo lampepfl/dotty dotty && mv dotty scala
      gmessage "Building Scala compiler"
      mkdir -p .wrath/log
      "$compiler"/bin/scalac -version > .wrath/log/scala.log 2>&1
      gmessage "Finished building Scala compiler"
      gmessage "$(scala/bin/scala -version 2>&1)"
    else
      gmessage "Scala compiler not found."
      gmessage "Try again with -F or create a symlink to a clone of the lampepfl/dotty repository."
      exit 1
    fi
  fi
  scala="$compiler"/bin/scala
  scalac="$compiler"/bin/scalac
}

mkdirs() {
  mkdir -p .wrath/bin "$distDir" "$cacheDir" .wrath/log .wrath/plugin .wrath/lib
}

setChecksum() {
  local id srcDir inputs inputHashes cov
  id="$1"
  srcDir="$root/${sources[$id]}"

  if [[ "${coverage[$target]}" = "${id}" ]]
  then cov="1"
  else cov="0"
  fi

  if [ "${hashes[$id]}" = "" ]
  then
    read -ra inputs <<< "${include[$id]}"
    for input in "${inputs[@]}"
    do
      setChecksum "$input"
      inputHashes+="${hashes[$input]}"
    done

    if compgen -G "$srcDir"/*.scala > /dev/null
    then hashes[$id]="$( (echo "$cov" && echo "$inputHashes" && cat "$srcDir"/*.scala) | md5sum | cut -d' ' -f1)"
    else hashes[$id]="0"
    fi
  fi
}

package() {
  local dir jarFile
  local -a args

  jarFile="$1"
  dir="$2"

  for include in "$dir"/*
  do
    find "$include" -print0 | while IFS= read -r -d '' item
    do touch -d 2000-01-01 "$item"
    done
    args+=(-C "${include%/*}" "${include##*/}")
  done
  jar cMf "${jarFile}" "${args[@]}"
}

readConfig() {
  if [ "$defaultDir" = "" ]
  then
    if [ -e "$configFile" ]
    then defaultDir="$(cat "$configFile")"
    else defaultDir="$workDir"
    fi
  fi
}

readCodl() {
  local brepo file ref IFS project module repoDir lib repoUrl
  local -i isMain
  local -a libDetails
  IFS=$'\n'
  brepo="$1"
  file="$2"
  isMain="$3"
  if [ ! "${parsed[$file]}" = "1" ]
  then
    if [ ! "$isMain" = "1" ]
    then rmessage "$brepo" "Reading build file"
    fi
    parsed[$file]="1"
    parseCodl "$file"

    if [ "$isMain" = "1" ]
    then target="$(values "$file:target")"
    fi

    for repoUrl in $(children "$file:" repo)
    do
      case "$repoUrl" in
        https*)
          repo="${repoUrl:19}" ;;
        *)
          repo="$repoUrl" ;;
      esac


      if [ ! "${repoSeen[$repo]}" = "1" ]
      then
        repoDir="$defaultDir/${repo#*/}"
        if [ ! -d "$repoDir" ]
        then 
          if [ "$fetch" -ge "1" ]
          then
            fetchRepo "$repo" "$repoDir"
            repoSeen["$repo"]="1"
            readCodl "$repo" "$repoDir"/"$buildFile"
          else
            rmessage "$repo" "Repository not found"
            rmessage "$repo" "Run wrath with -f to fetch missing repositories, or create a symlink to $repo in the current directory"
            exit 1
          fi
        else
          repoSeen["$repo"]="1"
          readCodl "$repo" "$repoDir"/"$buildFile"
        fi
      fi
    done

    for project in $(children "$file:" project)
    do
      for module in $(children "$file:$project" module)
      do
        for lib in $(children "$file:$project.$module" lib)
        do
          IFS=$' '
          libDetails=( ${values["$file:$project.$module.$lib"]} )
          download["${libDetails[0]}"]="${libDetails[1]}"
          jars["$project/$module"]+="${libDetails[0]} "
        done
        mainClass["$project/$module"]="$(values "$file:$project.$module.main")"
        artifactFile["$project/$module"]="$(values "$file:$project.$module.artifact")"
        buildIdFile["$project/$module"]="$(values "$file:$project.$module.counter")"
        sources["$project/$module"]="$(values "$file:$project.$module.sources")"
        include["$project/$module"]="$(values "$file:$project.$module.include")"
        coverage["$project/$module"]="$(values "$file:$project.$module.coverage")"

        if [ "$(values "$file:$project.$module.plugin")" = "yes" ]
        then plugin["$project/$module"]="1"
        fi

      done
    done
  fi
}

classpath() {
  local IFS id
  local -a acc dependencies dedup
  id="$1"
  IFS=$' '

  if [ "${lib[$id]}" = "" ]
  then
    read -ra libs <<< "${jars[$id]}"
    for jar in "${libs[@]}"
    do acc+=(.wrath/lib/"${jar##*/}.jar")
    done

    read -ra dependencies <<< "$(echo "${include[$id]}" | tr '\n' ' ')"

    for ref in "${dependencies[@]}"
    do classpath "$ref"
    done

    for ref in "${dependencies[@]}"
    do
      acc+=("$distDir"/"${ref//\//-}".jar)
      acc+=("${lib[$ref]}")
    done

    dedup="$(echo "${acc[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')"
    lib[$id]="$dedup"
  fi
}

build() {
  local IFS id bproject bmodule root srcDir chksum
  local -a dependencies

  id="$1"
  bproject="${id%%/*}"
  bmodule="${id##*/}"

  if [ "$bproject" = "$project" ]
  then root="$(realpath .)"
  else root="$(realpath "$defaultDir/$bproject")"
  fi

  IFS=$' '

  fetchLibs "$id"

  if [ ! "${building[$id]}" = "1" ]
  then
    read -ra dependencies <<< "$(echo "${include[$id]}" | tr '\n' ' ')"
    building[$id]="1"
    for ref in "${dependencies[@]}"
    do build "$ref"
    done

    chksum="$(cat .wrath/cache/"$id" 2>/dev/null)"
    setChecksum "$id"
    if [ ! "$chksum" = "${hashes[$id]}" ]
    then
      classpath "$id"
      classpath="${lib[$id]// /:}"
      rm -f .wrath/log/"$bproject"/"$bmodule".log

      if [ -f "$cacheDir/${hashes[$id]}.jar" ]
      then ln -f "$cacheDir"/"${hashes[$id]}.jar" "$distDir"/"${bproject}"-"${bmodule}".jar
      else
        mkdir -p .wrath/bin/"$bproject"/"$bmodule"
        if [ -d "$root/res" ]
        then
          for res in "$root"/res/*
          do cp -r "$res" .wrath/bin/"$bproject"/"$bmodule"/
          done
        fi
        compile "$bproject" "$bmodule" "$classpath" "$root"
      fi

      if [ "${plugin[$bproject/$bmodule]}" = "1" ]
      then
        message "$bproject"/"$bmodule" "Installing plugin"
        cp "$distDir"/"$bproject"-"$bmodule".jar .wrath/plugin/"$bproject"-"$bmodule".jar
      fi
    fi
  fi
}

compile() {
  local classpath bproject bmodule root srcDir id tmpJar
  local -i pageWidth
  local -a opts
  bproject="$1"
  bmodule="$2"
  id="$bproject"/"$bmodule"
  classpath="$3"
  pageWidth=$((columns - 31))
  root="$4"
  srcDir="${sources[$bproject/$bmodule]}"

  opts=(
    -classpath "$classpath"
    -d .wrath/bin/"$bproject"/"$bmodule"
    -Xmax-inlines 64
    -Xpluginsdir .wrath/plugin
    -Wshadow:all
    -pagewidth "$pageWidth"
    -J-Xss1536K
    -J--enable-preview
    -J-Xss2m
    -new-syntax
    -feature
    -deprecation
    -source future
    -Wunused:imports
    -Wimplausible-patterns
    -Wsafe-init
    -Yrequire-targetName
    -Ycc-new
    -Yexplicit-nulls
    -Ycheck-all-patmat
    -language:experimental.clauseInterleaving
    -language:experimental.modularity
    -language:experimental.genericNumberLiterals
    -language:experimental.givenLoopPrevention
    -language:experimental.fewerBraces
    -language:experimental.into
    -language:experimental.relaxedExtensionImports
    -language:experimental.erasedDefinitions
    -language:experimental.saferExceptions
    -language:experimental.namedTypeArguments
  )

  rm -f .wrath/log/"$bproject"-"$bmodule".log
  touch .wrath/log/"$bproject"-"$bmodule".log
  if compgen -G "$root"/"$srcDir"/*.scala > /dev/null
  then
    if [[ "${coverage[$target]}" = "${bproject}/${bmodule}" ]]
    then
      mkdir -p .wrath/coverage/"$bproject"/"$bmodule"
      opts+=( -coverage-out .wrath/coverage/"$bproject"/"$bmodule" )
      message "$bproject"/"$bmodule" "Compiling with test coverage..."
    else
      message "$bproject"/"$bmodule" "Compiling..."
    fi
    if $scalac "${opts[@]}" "$root"/"$srcDir"/*.scala > .wrath/log/"$bproject"-"$bmodule".log 2>&1
    then
      mkdir -p .wrath/cache/"$bproject"
      message "$bproject"/"$bmodule" "Finished compiling"

      while read -r line
      do message "$bproject"/"$bmodule" "$line"
      done < .wrath/log/"$bproject"-"$bmodule".log

      package "$cacheDir"/"${hashes["$id"]}".jar .wrath/bin/"$bproject"/"$bmodule"
      ln -f "$cacheDir"/"${hashes["$id"]}".jar "${distDir}"/"$bproject"-"$bmodule".jar

      if [ "$artifact" = "1" ] && [ "$target" = "$bproject/$bmodule" ]
      then
        tmpJar="$(mktemp -u --suffix=".jar")"
        zipmerge "$tmpJar" \
            $( (compgen -G "$compiler/dist/target/pack/lib/*.jar" && echo "${lib[$target]}" | tr ' ' '\n' | grep -v '^$') | tr '\n' ' ') \
            "${distDir}/$bproject-$bmodule.jar"
        buildId=$(cat "${buildIdFile["$target"]}")
        newBuildId=$((buildId+1))
        echo "$newBuildId" > "${buildIdFile["$target"]}"
        jar ufe "$tmpJar" "${mainClass["$target"]}"
	payloadSize=$(wc -c "jre/jre-21-linux-$(uname -m).tar.gz" | cut -d' ' -f1)
	jarSize=$(wc -c "$tmpJar" | cut -d' ' -f1)
	(unzip -p "$tmpJar" ethereal/prefix | sed "s/%%PAYLOADSIZE%%/$payloadSize/" | sed "s/%%JARSIZE%%/$jarSize/" | sed "s/%%BUILDID%%/$buildId/" ; cat "jre/jre-21-linux-$(uname -m).tar.gz"; cat "$tmpJar") > "${artifactFile["$target"]}"
        chmod +x "${artifactFile["$target"]}"

        if [ "$installTarget" != "" ]
        then cp "${artifactFile["$target"]}" "$installTarget"
        fi

        rm "$tmpJar"
      fi

    else
      message "$id" "Compilation failed"

      while read -r line
      do message "$bproject"/"$bmodule" "$line"
      done < .wrath/log/"$bproject"-"$bmodule".log

      exit 1
    fi
  fi
}

fail() {
  message "$1"/"$2" "$3"
  exit 1
}

gmessage() {
  local text prefix
  if [ "$quiet" != "1" ]
  then
    text="$1"
    prefix="${esc}[1;32mwrath${esc}[2;37m:${esc}[0m"
    if [ "$showClasspath" != "1" ]
    then printf "%48s %s\n" "$prefix" "$text"
    #else printf "%48s %s\n" "$prefix" "$text" >&2
    fi
  fi
}

message() {
  local id bproject bmodule text prefix
  if [ "$quiet" != "1" ]
  then
    id="$1"
    bproject="${id%%/*}"
    bmodule="${id##*/}"
    text="$2"
    prefix="${esc}[0;36m$bproject${esc}[2;37m/${esc}[1;34m$bmodule${esc}[2;37m:${esc}[0m"
    if [ "$showClasspath" != "1" ]
    then printf "%62s %s\n" "$prefix" "$text"
    #else printf "%62s %s\n" "$prefix" "$text" >&2
    fi
  fi
}

rmessage() {
  local id bgroup brepo text prefix
  if [ "$quiet" != "1" ]
  then
    id="$1"
    bgroup="${id%%/*}"
    brepo="${id##*/}"
    text="$2"
    prefix="${esc}[0;31m$bgroup${esc}[2;37m/${esc}[0;35m$brepo${esc}[2;37m:${esc}[0m"
    if [ "$showClasspath" != "1" ]
    then printf "%62s %s\n" "$prefix" "$text"
    #else printf "%62s %s\n" "$prefix" "$text" >&2
    fi
  fi
}

parseOpts() {
  while [[ $# -gt 0 ]]
  do
    case "$1" in
      --)
        shift 1
        arguments=("$@")
        break
        ;;
      -a|--artifact)
        artifact="1"
        shift ;;
      -b|--benchmark)
        benchmark="1"
        shift ;;
      -c|--clean)
        clean="1"
        shift 1 ;;
      -C|--deep-clean)
        clean="2"
        shift 1 ;;
      -d|--default)
        nonempty "$@"
        defaultDir="$2"
        shift 2 ;;
      -f|--fetch)
        fetch="1"
        shift 1 ;;
      -F|--fetch-all)
        fetch="2"
        shift 1 ;;
      -g|--garbage-collect)
        garbageCollect="1"
        shift 1 ;;
      -h|--help)
        showHelp
        ;;
      -i|--install)
        nonempty "$@"
        installTarget="$2"
        shift 2 ;;
      -j|--jdk)
        nonempty "$@"
        export JAVA_HOME="$2"
        shift 2 ;;
      -m|--main)
        nonempty "$@"
        overrideMain="$2"
        shift 2 ;;
      -p|--profile)
        profile="1"
        shift ;;
      -q|--quiet)
        quiet="1"
        shift ;;
      -r|--repl)
        repl="1"
        shift ;;
      -s|--scala)
        nonempty "$@"
        compiler="$2"
        shift 2 ;;
      -S|--show-classpath)
        showClasspath="1"
        shift 1 ;;
      -t|--target)
        target="$2"
        shift 2 ;;
      -x|--exec)
        run="1"
        shift ;;
      -*)
        gmessage "Unrecognized option: '$1'"
        exit 1 ;;
      *)
        gmessage "Unrecognized parameter: '$1"
        exit 1 ;;
    esac
  done
}

checkTarget() {
  if [[ "$target" = "" ]]
  then
    gmessage "A build target is required"
    exit 1
  fi
}

setBench() {
  local intelNoTurbo amdTurbo cpus status invStatus
  status="$1"

  if [ "$status" = "1" ]
  then invStatus="0"
  else invStatus="1"
  fi

  intelNoTurbo="/sys/devices/system/cpu/intel_pstate/no_turbo"
  amdTurbo="/sys/devices/system/cpu/cpufreq/boost"
  cpus="/sys/devices/system/cpu"
  dropCaches="/proc/sys/vm/drop_caches"

  if [ "$status" = "1" ]
  then gmessage "Setting benchmarking options; please enter your sudo password if prompted."
  fi

  if [ -f "$intelNoTurbo" ]
  then
    gmessage "Setting Intel CPU turboboost"
    sudo sh -c "echo $status > $intelNoTurbo"
  fi

  if [ -f "$amdTurbo" ]
  then
    gmessage "Setting AMD CPU turboboost"
    sudo sh -c "echo $invStatus > $amdTurbo"
  fi

  if [ -f "$cpus/cpu0/cpufreq/scaling_governor" ] && \
      [ "$(cat "$cpus/cpu0/cpufreq/scaling_governor")" != "performance" ]
  then
    if [ "$status" = "1" ]
    then
      gmessage "Seting CPU scaling governor to 'performance'"
      oldGovernor="$(cat "$cpus/cpu0/cpufreq/scaling_governor")"
      for cpu in "$cpus"/*
      do sudo sh -c "echo performance > $cpu/cpufreq/scaling_governor"
      done
    else
      gmessage "Restoring CPU scaling governor"
      for cpu in "$cpus"/*
      do sudo sh -c "echo $oldGovernor > $cpu/cpufreq/scaling_governor"
      done
    fi
  fi

  if [ "$status" = "1" ] && [ -f "$dropCaches" ]
  then
    gmessage "Dropping filesystem caches"
    sudo sh -c "echo 3 > $dropCaches && sync"
  fi
}

identifier[project]=1
identifier[repo]=1
identifier[module]=1
identifier[include]=0
identifier[opt]=0
identifier[sources]=0
identifier[coverage]=0
identifier[compiler]=0
identifier[plugin]=0
identifier[lib]=1
identifier[name]=0
identifier[description]=0
identifier[target]=0
identifier[main]=0
identifier[artifact]=0
identifier[counter]=0

if [ "$showClasspath" == "1" ] && [ -f .wrath/classpath.cache ]
then
  cat .wrath/classpath.cache
  exit 0
fi

parseOpts "$@"
gmessage "Reading global config"
workDir="$(realpath "$PWD")"
readConfig
gmessage "Starting build"
readCodl "$project/*" "$workDir"/"$buildFile" 1

project="${target%%/*}"
module="${target##*/}"

clean
mkdirs
checkCompiler
build "$target"

wait

if [[ "${coverage[$target]}" != "" ]]
then execOpts=(-Dscalac.coverage=.wrath/coverage/"${coverage[$target]}" -J--add-modules=jdk.incubator.vector)
else execOpts=(-J--add-modules=jdk.incubator.vector)
fi

if [ "$showClasspath" = "1" ]
then
  echo -n "${compiler}"/dist/target/pack/lib/* | tr ' ' ':' > .wrath/classpath.cache
  echo -n : >> .wrath/classpath.cache
  echo "${classpath}${distDir}/$project-$module.jar" | sed 's/^:*//' | sed 's/:*$//' >> .wrath/classpath.cache
  cat .wrath/classpath.cache
fi

if [ "$run" = "1" ]
then
  classpath "$target"
  classpath="${lib[$target]// /:}"
  execClass="${overrideMain:-${mainClass[$target]}}"

  if [ "$profile" = "1" ]
  then
    mkdir -p ".wrath/profile"
    execOpts+=(-J-XX:+UnlockCommercialFeatures -J-XX:+FlightRecorder "-J-XX:StartFlightRecording=duration=10s,filename=.wrath/profile/flight.jfr")
  fi

  if [ "$execClass" = "" ]
  then fail "$project" "$module" "Main class has not been specified."
  else
    message "$target" "Starting $execClass"
    if [ "$benchmark" = "1" ]
    then
      setBench 1
      sudo -E nice -n -5 taskset -c 1 "$scala" "${execOpts[@]}" -classpath "${classpath}${distDir}"/"$project"-"$module".jar "$execClass" "${arguments[@]}" 
      setBench 0
    else "$scala" "${execOpts[@]}" -classpath "${classpath}${distDir}"/"$project"-"$module".jar "$execClass" "${arguments[@]}" 
    fi
  fi
fi

if [ "$repl" = "1" ]
then
  classpath "$target"
  classpath="${lib[$target]// /:}"
  "$scala" "${execOpts[@]}" -classpath "${classpath}${distDir}"/"$project"-"$module".jar "${arguments[@]}" 
fi
